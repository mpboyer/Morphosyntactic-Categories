@inbook{Has18,
    author = {Haspelmath, Martin},
    year = {2018},
    month = {09},
    pages = {83-114},
    title = {How comparative concepts and descriptive linguistic categories are different},
    isbn = {9783110607963},
    journal = {Aspects of Linguistic Variation},
    url = {https://www.degruyter.com/document/doi/10.1515/9783110607963-004/html},
    doi = {10.1515/9783110607963-004}
}

@article{tSNE,
    author = {van der Maaten, Laurens and Hinton, Geoffrey},
    year = {2008},
    month = {11},
    pages = {2579-2605},
    title = {Viualizing data using t-SNE},
    volume = {9},
    url = {https://www.jmlr.org/papers/volume9/vandermaaten08a/vandermaaten08a.pdf},
    journal = {Journal of Machine Learning Research}
}

@article{UDv2,
    author = {de Marneffe, Marie-Catherine and Manning, Christopher D. and Nivre, Joakim and Zeman, Daniel},
    title = "{Universal Dependencies}",
    journal = {Computational Linguistics},
    volume = {47},
    number = {2},
    pages = {255-308},
    year = {2021},
    month = {07},
    abstract = "{Universal dependencies (UD) is a framework for morphosyntactic annotation of human language, which to date has been used to create treebanks for more than 100 languages. In this article, we outline the linguistic theory of the UD framework, which draws on a long tradition of typologically oriented grammatical theories. Grammatical relations between words are centrally used to explain how predicate–argument structures are encoded morphosyntactically in different languages while morphological features and part-of-speech classes give the properties of words. We argue that this theory is a good basis for crosslinguistically consistent annotation of typologically diverse languages in a way that supports computational natural language understanding as well as broader linguistic studies.}",
    issn = {0891-2017},
    doi = {10.1162/coli_a_00402},
    url = {https://doi.org/10.1162/coli\_a\_00402},
    eprint = {https://direct.mit.edu/coli/article-pdf/47/2/255/1938138/coli\_a\_00402.pdf},
}

@misc{UD214,
    title = {Universal Dependencies 2.14},
    author = {Zeman, Daniel and others},
    url = {http://hdl.handle.net/11234/1-5502},
    note = {{LINDAT}/{CLARIAH}-{CZ} digital library at the Institute of Formal and Applied Linguistics ({{\'U}FAL}), Faculty of Mathematics and Physics, Charles University},
    copyright = {Licence Universal Dependencies v2.14},
    year = {2024}
}



@article{SimplexTree,
  author = {Jean{-}Daniel Boissonnat and Cl{\'{e}}ment Maria},
  title = {The Simplex Tree: an Efficient Data Structure for General Simplicial Complexes},
  journal = {CoRR},
  volume = {abs/2001.02581},
  year = {2020},
  url = {http://arxiv.org/abs/2001.02581},
  eprinttype = {arXiv},
  eprint = {2001.02581},
  timestamp = {Mon, 13 Jan 2020 12:40:17 +0100},
  biburl = {https://dblp.org/rec/journals/corr/abs-2001-02581.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{ToMATo,
author = {Chazal, Frédéric and Guibas, Leonidas and Oudot, Steve and Skraba, Primoz},
year = {2011},
month = {06},
pages = {},
title = {Persistence-Based Clustering in Riemannian Manifolds},
volume = {60},
journal = {Journal of the ACM},
doi = {10.1145/1998196.1998212}
}

@article{Hera,
author = {Kerber, Michael and Morozov, Dmitriy and Nigmetov, Arnur},
title = {Geometry Helps to Compare Persistence Diagrams},
year = {2017},
issue_date = {2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
issn = {1084-6654},
url = {https://doi.org/10.1145/3064175},
doi = {10.1145/3064175},
abstract = {Exploiting geometric structure to improve the asymptotic complexity of discrete assignment problems is a well-studied subject. In contrast, the practical advantages of using geometry for such problems have not been explored. We implement geometric variants of the Hopcroft-Karp algorithm for bottleneck matching (based on previous work by Efrat el al.) and of the auction algorithm by Bertsekas for Wasserstein distance computation. Both implementations use k-d trees to replace a linear scan with a geometric proximity query. Our interest in this problem stems from the desire to compute distances between persistence diagrams, a problem that comes up frequently in topological data analysis. We show that our geometric matching algorithms lead to a substantial performance gain, both in running time and in memory consumption, over their purely combinatorial counterparts. Moreover, our implementation significantly outperforms the only other implementation available for comparing persistence diagrams.},
journal = {ACM J. Exp. Algorithmics},
month = {sep},
articleno = {1.4},
numpages = {20},
keywords = {persistent homology, k-d tree, bipartite matching, Assignment problems}
}

@article{PythonPOT,
  author  = {R{\'e}mi Flamary and Nicolas Courty and others},
  title   = {POT: Python Optimal Transport},
  journal = {Journal of Machine Learning Research},
  year    = {2021},
  volume  = {22},
  number  = {78},
  pages   = {1-8},
  url     = {http://jmlr.org/papers/v22/20-451.html}
}

@InProceedings{Gudhi,
author="Maria, Cl{\'e}ment
and Boissonnat, Jean-Daniel
and Glisse, Marc
and Yvinec, Mariette",
editor="Hong, Hoon
and Yap, Chee",
title="The Gudhi Library: Simplicial Complexes and Persistent Homology",
booktitle="Mathematical Software -- ICMS 2014",
year="2014",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="167--174",
abstract="We present the main algorithmic and design choices that have been made to represent complexes and compute persistent homology in the Gudhi library. The Gudhi library (Geometric Understanding in Higher Dimensions) is a generic C++ library for computational topology. Its goal is to provide robust, efficient, flexible and easy to use implementations of state-of-the-art algorithms and data structures for computational topology. We present the different components of the software, their interaction and the user interface. We justify the algorithmic and design decisions made in Gudhi and provide benchmarks for the code. The software, which has been developped by the first author, will be available soon at project.inria.fr/gudhi/software/.",
isbn="978-3-662-44199-2"
}

@article{dot,
author = {Gansner, Emden R. and North, Stephen C.},
title = {An open graph visualization system and its applications to software engineering},
journal = {Software: Practice and Experience},
volume = {30},
number = {11},
pages = {1203-1233},
keywords = {graph visualization, software engineering, open systems},
doi = {https://doi.org/10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-024X%28200009%2930%3A11%3C1203%3A%3AAID-SPE338%3E3.0.CO%3B2-N},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/1097-024X%28200009%2930%3A11%3C1203%3A%3AAID-SPE338%3E3.0.CO%3B2-N},
abstract = {Abstract We describe a package of practical tools and libraries for manipulating graphs and their drawings. Our design, which is aimed at facilitating the combination of the package components with other tools, includes stream and event interfaces for graph operations, high-quality static and dynamic layout algorithms, and the ability to handle sizeable graphs. We conclude with a description of the applications of this package to a variety of software engineering tools. Copyright © 2000 John Wiley \& Sons, Ltd.},
year = {2000}
}
